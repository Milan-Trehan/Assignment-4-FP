import csv
from collections import Counter
import matplotlib.pyplot as plt
import ipywidgets as widgets
from IPython.display import display, clear_output, HTML
import json

class Recipe:
    def __init__(self, name, ingredients, steps, time_required, category, difficulty):
        self.name = name
        self.ingredients = ingredients
        self.steps = steps
        self.time_required = time_required
        self.category = category
        self.difficulty = difficulty
        self.is_favorite = False
    
    def to_dict(self):
        return {
            'name': self.name,
            'ingredients': self.ingredients,
            'steps': self.steps,
            'time_required': self.time_required,
            'category': self.category,
            'difficulty': self.difficulty,
            'is_favorite': self.is_favorite
        }
    
    def __str__(self):
        return (f"Recipe: {self.name}\nCategory: {self.category}\nDifficulty: {self.difficulty}\n"
                f"Time Required: {self.time_required} mins\nIngredients: {', '.join(self.ingredients)}\n"
                f"Steps: {self.steps}\n")

class RecipeBook:
    def __init__(self):
        self.recipes = []
        self.add_default_recipes()
    
    def add_recipe(self, recipe):
        self.recipes.append(recipe)

    def remove_recipe(self, recipe):
        self.recipes.remove(recipe)
    
    def get_recipe_by_name(self, name):
        for recipe in self.recipes:
            if recipe.name.lower() == name.lower():
                return recipe
        return None
    
    def get_recipes_by_category(self, category):
        return [recipe for recipe in self.recipes if recipe.category.lower() == category.lower()]
    
    def get_recipes_by_difficulty(self, difficulty):
        return [recipe for recipe in self.recipes if recipe.difficulty.lower() == difficulty.lower()]
    
    def get_recipes_by_time(self, time):
        return [recipe for recipe in self.recipes if recipe.time_required <= time]
    
    def get_recipe_by_ingredient(self, ingredient):
        return [recipe for recipe in self.recipes if ingredient.lower() in [i.lower() for i in recipe.ingredients]]
    
    def get_all_recipes_json(self):
        return json.dumps([recipe.to_dict() for recipe in self.recipes])
    
    def get_all_categories(self):
        return list(set(recipe.category for recipe in self.recipes))
    
    def add_default_recipes(self):
        default_recipes = [
            Recipe(
                "Spaghetti Bolognese",
                ["spaghetti", "minced beef", "tomato sauce", "onion", "garlic"],
                "Cook spaghetti. Cook minced beef with onion and garlic. Add tomato sauce. Mix with spaghetti.",
                30,
                "Main Course",
                "Easy"
            ),
            Recipe(
                "Caesar Salad",
                ["lettuce", "croutons", "chicken", "parmesan", "caesar dressing"],
                "Mix all ingredients together.",
                15,
                "Salad",
                "Easy"
            ),
            Recipe(
                "Chocolate Cake",
                ["flour", "sugar", "cocoa powder", "baking powder", "eggs", "milk", "butter"],
                "Mix ingredients. Bake.",
                60,
                "Dessert",
                "Medium"
            ),
            Recipe(
                "Pancakes",
                ["flour", "milk", "egg", "sugar", "butter"],
                "Mix ingredients. Cook on a hot pan.",
                15,
                "Breakfast",
                "Easy"
            ),
            Recipe(
                "Chicken Curry",
                ["chicken", "curry powder", "coconut milk", "onion", "garlic", "ginger"],
                "Cook chicken with onion, garlic, and ginger. Add curry powder and coconut milk. Simmer.",
                40,
                "Main Course",
                "Medium"
            ),
            Recipe(
                "Beef Stew",
                ["beef", "potatoes", "carrots", "onion", "beef broth"],
                "Cook beef with onion. Add potatoes, carrots, and beef broth. Simmer.",
                120,
                "Main Course",
                "Hard"
            ),
            Recipe(
                "Omelette",
                ["eggs", "cheese", "ham", "bell pepper"],
                "Beat eggs. Cook with cheese, ham, and bell pepper.",
                10,
                "Breakfast",
                "Easy"
            ),
            Recipe(
                "Grilled Cheese Sandwich",
                ["bread", "cheese", "butter"],
                "Butter bread. Place cheese between slices. Grill.",
                5,
                "Snack",
                "Easy"
            ),
            Recipe(
                "Tacos",
                ["tortillas", "ground beef", "lettuce", "tomato", "cheese"],
                "Cook ground beef. Assemble tacos with lettuce, tomato, and cheese.",
                20,
                "Main Course",
                "Easy"
            ),
            Recipe(
                "Fruit Salad",
                ["kiwi", "watermelon", "orange", "grapes"],
                "Chop fruits. Mix together.",
                5,
                "Dessert",
                "Easy"
            )
        ]
        for recipe in default_recipes:
            self.add_recipe(recipe)

class RecipeManager:
    def __init__(self):
        self.recipe_book = RecipeBook()
        self.output = widgets.Output()
        self.setup_ui()
        
    def setup_ui(self):
        # Create the header
        header = widgets.HTML(value="<h1 style='font-size: 24px; margin-bottom: 20px; color: #4CAF50;'>My Recipe Book</h1>")
        
        # Create dropdown menus
        self.view_dropdown = widgets.Dropdown(
            options=['Full Collection', 'Quick Meals', 'Favorites'],
            description='View:',
            style={'description_width': '100px'},
            layout=widgets.Layout(width='300px')
        )
        
        self.filter_dropdown = widgets.Dropdown(
            options=['All'] + self.recipe_book.get_all_categories(),
            description='Filter:',
            style={'description_width': '100px'},
            layout=widgets.Layout(width='300px')
        )
        
        # Create buttons
        self.add_button = widgets.Button(description="Add Recipe", button_style='success')
        self.remove_button = widgets.Button(description="Remove Recipe", button_style='danger')
        self.refresh_button = widgets.Button(description="Refresh", button_style='info')
        
        # Set up button callbacks
        self.add_button.on_click(self.add_recipe_ui)
        self.remove_button.on_click(self.remove_recipe_ui)
        self.refresh_button.on_click(self.refresh_display)
        self.view_dropdown.observe(self.refresh_display, names='value')
        self.filter_dropdown.observe(self.refresh_display, names='value')
        
        # Create layout
        filters = widgets.VBox([self.view_dropdown, self.filter_dropdown])
        buttons = widgets.HBox([self.add_button, self.remove_button, self.refresh_button])
        
        # Display everything
        display(header)
        display(filters)
        display(buttons)
        display(self.output)
        
        # Show initial recipes
        self.refresh_display()
    
    def create_recipe_card(self, recipe):
        steps_button = widgets.Button(description="Steps", layout=widgets.Layout(width='auto'), button_style='primary')
        steps_button.style.button_color = 'lightblue'
        steps_button.on_click(lambda b: self.toggle_steps(recipe_card.steps_output, recipe))
        
        ingredients_button = widgets.Button(description="Ingredients", layout=widgets.Layout(width='auto'), button_style='warning')
        ingredients_button.style.button_color = 'Gold'
        ingredients_button.on_click(lambda b: self.toggle_ingredients(recipe_card.ingredients_output, recipe))
        
        favorite_button = widgets.ToggleButton(
            value=recipe.is_favorite,
            description='â˜…',
            button_style='warning' if recipe.is_favorite else '',
            layout=widgets.Layout(width='auto')
        )
        favorite_button.observe(lambda change: self.toggle_favorite(change, recipe), names='value')
        
        steps_output = widgets.Output()
        ingredients_output = widgets.Output()
        
        recipe_card = widgets.VBox([
            widgets.HTML(value=f"""
                <div style="padding: 20px; margin: 10px 0; border: 1px solid #ddd; border-radius: 8px; background: #f9f9f9;">
                    <h3 style="margin: 0; font-size: 18px; color: #333;">{recipe.name}</h3>
                    <p style="margin: 5px 0; color: #666;">
                        Category: {recipe.category}, Difficulty: {recipe.difficulty}, Time: {recipe.time_required} mins
                    </p>
                </div>
            """),
            widgets.HBox([steps_button, ingredients_button, favorite_button]),
            steps_output,
            ingredients_output
        ])
        
        recipe_card.steps_output = steps_output
        recipe_card.ingredients_output = ingredients_output
        
        return recipe_card
    
    def toggle_steps(self, output, recipe):
        with output:
            clear_output()
            display(HTML(f"<p>{recipe.steps}</p>"))
    
    def toggle_ingredients(self, output, recipe):
        with output:
            clear_output()
            display(HTML(f"<p>{', '.join(recipe.ingredients)}</p>"))
    
    def toggle_favorite(self, change, recipe):
        recipe.is_favorite = change['new']
        change['owner'].button_style = 'warning' if recipe.is_favorite else ''
    
    def refresh_display(self, b=None):
        with self.output:
            clear_output()
            filter_value = self.filter_dropdown.value
            view_value = self.view_dropdown.value
            
            if filter_value == 'All':
                recipes = self.recipe_book.recipes
            else:
                recipes = self.recipe_book.get_recipes_by_category(filter_value)
            
            if view_value == 'Quick Meals':
                recipes = [recipe for recipe in recipes if recipe.time_required <= 30]
            elif view_value == 'Favorites':
                recipes = [recipe for recipe in recipes if recipe.is_favorite]
            
            recipe_cards = [self.create_recipe_card(recipe) for recipe in recipes]
            accordion = widgets.Accordion(children=recipe_cards)
            for i, recipe in enumerate(recipes):
                accordion.set_title(i, recipe.name)
            display(accordion)
    
    def add_recipe_ui(self, b=None):
        with self.output:
            clear_output()
            # Create input widgets
            name = widgets.Text(description="Name:", layout=widgets.Layout(width='400px'))
            ingredients = widgets.Text(description="Ingredients:", layout=widgets.Layout(width='400px'))
            steps = widgets.Text(description="Steps:", layout=widgets.Layout(width='400px'))
            time_required = widgets.IntText(description="Time (mins):", layout=widgets.Layout(width='400px'))
            category = widgets.Text(description="Category:", layout=widgets.Layout(width='400px'))
            difficulty = widgets.Text(description="Difficulty:", layout=widgets.Layout(width='400px'))
            submit = widgets.Button(description="Add Recipe", button_style='success')
            
            def on_submit(b):
                new_recipe = Recipe(
                    name.value,
                    ingredients.value.split(','),
                    steps.value,
                    time_required.value,
                    category.value,
                    difficulty.value
                )
                self.recipe_book.add_recipe(new_recipe)
                self.update_category_dropdown()
                self.refresh_display()
            
            submit.on_click(on_submit)
            display(widgets.VBox([name, ingredients, steps, time_required, category, difficulty, submit]))
    
    def remove_recipe_ui(self, b=None):
        with self.output:
            clear_output()
            # Create input widget
            name = widgets.Text(description="Recipe name:", layout=widgets.Layout(width='400px'))
            submit = widgets.Button(description="Remove", button_style='danger')
            
            def on_submit(b):
                recipe = self.recipe_book.get_recipe_by_name(name.value)
                if recipe:
                    self.recipe_book.remove_recipe(recipe)
                    self.update_category_dropdown()
                    self.refresh_display()
            
            submit.on_click(on_submit)
            display(widgets.VBox([name, submit]))
    
    def update_category_dropdown(self):
        self.filter_dropdown.options = ['All'] + self.recipe_book.get_all_categories()

# Initialize and display the manager
manager = RecipeManager()
    cli = RecipeBookCLI()
    cli.run()
